name: Deploy to AWS EC2 c7i-flex.large

on:
  push:
    branches: [ main, production ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.14.0'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install -g pnpm@${{ env.PNPM_VERSION }}
        pnpm install --frozen-lockfile

    - name: Run security audit
      run: |
        pnpm audit --audit-level moderate
        
    - name: Lint code
      run: pnpm lint

    - name: Type check
      run: pnpm type-check || echo "Type check completed"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:17.5-alpine3.20
        env:
          POSTGRES_USER: docflow_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: pwausers_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.4-alpine
        env:
          REDIS_PASSWORD: test_redis_password
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install pnpm
      run: npm install -g pnpm@${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Create test environment
      run: |
        cat > .env.test << EOF
        NODE_ENV=test
        DATABASE_URL=postgresql://docflow_test:test_password@localhost:5432/pwausers_test
        AUTH_SECRET=test-secret-key-for-ci-cd-pipeline-testing
        PWA_AUTH_URL=https://test.example.com/api/login
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_PASSWORD=test_redis_password
        NEXTAUTH_URL=http://localhost:3000
        EOF

    - name: Setup database
      run: |
        pnpm db:push
        
    - name: Build application
      run: |
        pnpm build
        
    - name: Run tests (if available)
      run: |
        # Add test command when tests are implemented
        echo "Tests would run here"
        
    - name: Check build artifacts
      run: |
        ls -la .next/
        test -f .next/standalone/server.js || exit 1

  # Docker Build and Push
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          NODE_ENV=production
          NEXT_TELEMETRY_DISABLED=1

  # Deploy to EC2
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test, docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    environment: 
      name: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
      url: ${{ vars.APP_URL }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup deployment environment
      run: |
        echo "DEPLOYMENT_ENV=${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}" >> $GITHUB_ENV
        echo "IMAGE_TAG=ghcr.io/${{ github.repository }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Prepare deployment files
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy necessary files
        cp docker-compose.c7i-flex.yml deployment/
        cp -r nginx/ deployment/ 2>/dev/null || true
        cp -r scripts/ deployment/ 2>/dev/null || true
        cp -r redis/ deployment/ 2>/dev/null || true
        
        # Create environment file
        cat > deployment/.env.production << EOF
        NODE_ENV=production
        POSTGRES_USER=${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB=${{ secrets.POSTGRES_DB }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}
        AUTH_TRUST_HOST=true
        AUTH_SECRET=${{ secrets.AUTH_SECRET }}
        PWA_AUTH_URL=${{ secrets.PWA_AUTH_URL }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        REDIS_DB=0
        REDIS_KEY_PREFIX=docflow:
        TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
        AWS_REGION=${{ vars.AWS_REGION }}
        AWS_S3_BUCKET=${{ vars.AWS_S3_BUCKET }}
        DOCKER_IMAGE=${{ env.IMAGE_TAG }}
        NEXT_PUBLIC_MONTH_YEAR_FUTURE_YEARS=${{ vars.NEXT_PUBLIC_MONTH_YEAR_FUTURE_YEARS || 1 }}
        NEXT_PUBLIC_MONTH_YEAR_PAST_YEARS=${{ vars.NEXT_PUBLIC_MONTH_YEAR_PAST_YEARS || 1 }}
        EOF

    - name: Create deployment package
      run: |
        tar -czf deployment-${{ github.sha }}.tar.gz -C deployment .
        
    - name: Upload to S3 (optional backup)
      run: |
        aws s3 cp deployment-${{ github.sha }}.tar.gz s3://${{ vars.DEPLOYMENT_BUCKET }}/docflow/deployments/ || echo "S3 upload skipped"

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Pre-deployment health check
      run: |
        ssh -o StrictHostKeyChecking=no ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "
          curl -f http://localhost:3000/api/health || echo 'Pre-deployment health check failed'
        "

    - name: Deploy to EC2
      run: |
        # Transfer deployment package
        scp -o StrictHostKeyChecking=no deployment-${{ github.sha }}.tar.gz ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }}:/tmp/

        # Execute deployment on EC2
        ssh -o StrictHostKeyChecking=no ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "
          set -e
          echo '=== Starting DocFlow Deployment ==='
          
          # Switch to docflow user and deployment directory
          sudo -u docflow bash << 'DEPLOY_SCRIPT'
          cd /opt/docflow
          
          # Backup current deployment
          if [ -f docker-compose.c7i-flex.yml ]; then
            echo 'Creating backup of current deployment...'
            cp docker-compose.c7i-flex.yml docker-compose.backup.\$(date +%Y%m%d_%H%M%S).yml
            cp .env.production .env.backup.\$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
          fi
          
          # Extract new deployment
          echo 'Extracting new deployment...'
          tar -xzf /tmp/deployment-${{ github.sha }}.tar.gz
          
          # Pull new Docker image
          echo 'Pulling new Docker image...'
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker pull ${{ env.IMAGE_TAG }}
          
          # Update image reference in compose file
          sed -i 's|image: docflow:latest|image: ${{ env.IMAGE_TAG }}|g' docker-compose.c7i-flex.yml
          
          # Pre-deployment backup
          echo 'Creating pre-deployment backup...'
          ./scripts/backup-production.sh || echo 'Backup script not available'
          
          # Graceful shutdown with health check
          echo 'Stopping current services...'
          docker-compose -f docker-compose.c7i-flex.yml down --timeout 30
          
          # Clean up old images (keep last 3)
          echo 'Cleaning up old Docker images...'
          docker images ghcr.io/${{ github.repository }} --format 'table {{.Tag}}\t{{.ID}}' | tail -n +2 | sort -r | tail -n +4 | awk '{print \$2}' | xargs -r docker rmi
          
          # Start new deployment
          echo 'Starting new deployment...'
          docker-compose -f docker-compose.c7i-flex.yml --env-file .env.production up -d
          
          # Wait for services to be ready
          echo 'Waiting for services to start...'
          sleep 60
          
          # Run database migrations if needed
          echo 'Running database migrations...'
          docker-compose -f docker-compose.c7i-flex.yml exec -T app pnpm db:push || echo 'Migration skipped'
          
          # Cleanup
          rm -f /tmp/deployment-${{ github.sha }}.tar.gz
          
          echo '=== Deployment completed successfully ==='
DEPLOY_SCRIPT
        "

    - name: Post-deployment verification
      run: |
        # Wait for application to fully start
        sleep 30
        
        # Health checks
        ssh -o StrictHostKeyChecking=no ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "
          echo '=== Post-deployment Health Checks ==='
          
          # Check Docker containers
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
          
          # Application health check
          for i in {1..10}; do
            if curl -f http://localhost:3000/api/health; then
              echo 'Application health check: PASSED'
              break
            fi
            echo 'Attempt \$i failed, retrying in 10s...'
            sleep 10
          done
          
          # Database connectivity
          docker exec docflow-db pg_isready -U ${{ secrets.POSTGRES_USER }} && echo 'Database connectivity: PASSED' || echo 'Database connectivity: FAILED'
          
          # Redis connectivity
          docker exec docflow-redis redis-cli --no-auth-warning -a '${{ secrets.REDIS_PASSWORD }}' ping && echo 'Redis connectivity: PASSED' || echo 'Redis connectivity: FAILED'
          
          # SSL certificate check (if configured)
          if [ -f /data/ssl/certbot/live/*/fullchain.pem ]; then
            openssl x509 -checkend 2592000 -noout -in /data/ssl/certbot/live/*/fullchain.pem && echo 'SSL certificate: VALID' || echo 'SSL certificate: EXPIRES SOON'
          fi
          
          echo '=== Health checks completed ==='
        "

    - name: Performance monitoring
      run: |
        ssh -o StrictHostKeyChecking=no ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "
          echo '=== Performance Metrics ==='
          
          # System resources
          echo 'CPU and Memory usage:'
          top -bn1 | grep 'Cpu(s)' | head -1
          free -h | grep Mem
          
          # Docker resource usage
          echo 'Docker container resource usage:'
          docker stats --no-stream --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}'
          
          # Application response time
          echo 'Application response time:'
          time curl -s http://localhost:3000/api/health > /dev/null
        "

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        ssh -o StrictHostKeyChecking=no ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "
          sudo -u docflow bash << 'ROLLBACK_SCRIPT'
          cd /opt/docflow
          
          # Find the most recent backup
          LATEST_BACKUP=\$(ls -1t docker-compose.backup.*.yml 2>/dev/null | head -1)
          
          if [ -n \"\$LATEST_BACKUP\" ]; then
            echo 'Rolling back to: \$LATEST_BACKUP'
            
            # Stop current services
            docker-compose -f docker-compose.c7i-flex.yml down --timeout 30
            
            # Restore backup configuration
            cp \$LATEST_BACKUP docker-compose.c7i-flex.yml
            
            # Start previous version
            docker-compose -f docker-compose.c7i-flex.yml up -d
            
            echo 'Rollback completed'
          else
            echo 'No backup found for rollback'
          fi
ROLLBACK_SCRIPT
        "

  # Notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: vars.SLACK_WEBHOOK_URL
      with:
        status: ${{ needs.deploy.result }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "DocFlow Deployment ${{ needs.deploy.result }}",
            "attachments": [{
              "color": "${{ needs.deploy.result == 'success' && 'good' || 'danger' }}",
              "fields": [{
                "title": "Environment",
                "value": "${{ github.ref == 'refs/heads/production' && 'Production' || 'Staging' }}",
                "short": true
              }, {
                "title": "Instance",
                "value": "c7i-flex.large (${{ vars.EC2_HOST }})",
                "short": true
              }, {
                "title": "Commit",
                "value": "${{ github.sha }}",
                "short": true
              }, {
                "title": "Author",
                "value": "${{ github.actor }}",
                "short": true
              }]
            }]
          }

    - name: Send Telegram notification
      if: vars.TELEGRAM_BOT_TOKEN && vars.TELEGRAM_CHAT_ID
      run: |
        STATUS="${{ needs.deploy.result }}"
        if [ "$STATUS" = "success" ]; then
          EMOJI="✅"
          MESSAGE="DocFlow deployment successful!"
        else
          EMOJI="❌"
          MESSAGE="DocFlow deployment failed!"
        fi
        
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="$EMOJI $MESSAGE
        
        Environment: ${{ github.ref == 'refs/heads/production' && 'Production' || 'Staging' }}
        Instance: c7i-flex.large
        Commit: ${{ github.sha }}
        Author: ${{ github.actor }}
        
        🔗 View deployment: ${{ vars.APP_URL }}"