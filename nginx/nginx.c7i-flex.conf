# Nginx configuration optimized for AWS EC2 c7i-flex.large
# Optimized for 2 vCPU, 8GB RAM, high-performance networking

# Main context configuration
user nginx;
worker_processes auto;  # Auto-detect CPU cores (2 for c7i-flex.large)
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Events block - Optimized for c7i-flex.large
events {
    worker_connections 2048;    # 2 workers Ã— 2048 = 4096 total connections
    use epoll;                  # Linux-optimized event model
    multi_accept on;            # Accept multiple connections at once
    accept_mutex_delay 100ms;   # Reduce accept mutex delay
}

# HTTP block
http {
    # Basic settings optimized for performance
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Performance optimizations for c7i-flex.large
    sendfile on;                    # Use kernel sendfile
    sendfile_max_chunk 1m;          # Limit sendfile chunk size
    tcp_nopush on;                  # Optimize TCP packets
    tcp_nodelay on;                 # Don't buffer small packets
    keepalive_timeout 65;           # Keep connections alive
    keepalive_requests 1000;        # Max requests per connection
    client_max_body_size 50M;       # Max file upload size (for PDF documents)
    client_body_timeout 60s;        # Client body timeout
    client_header_timeout 60s;      # Client header timeout
    send_timeout 60s;               # Send timeout
    
    # Buffer sizes optimized for 8GB RAM
    client_body_buffer_size 128k;   # Client body buffer
    client_header_buffer_size 4k;   # Client header buffer
    large_client_header_buffers 8 8k; # Large client header buffers
    output_buffers 2 32k;            # Output buffers
    postpone_output 1460;            # Postpone output
    
    # Gzip compression for better performance
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;              # Balance compression vs CPU
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml
        text/x-component;
    
    # Security headers (comprehensive set)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=(), payment=(), usb=(), bluetooth=(), autoplay=(), fullscreen=(self)" always;
    add_header X-DNS-Prefetch-Control "off" always;
    add_header X-Download-Options "noopen" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;        # API rate limiting
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/m;      # Upload rate limiting
    limit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;      # Login rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=100r/m;   # General rate limiting
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn conn_limit_per_ip 20;
    
    # Log format optimized for monitoring
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    log_format performance '$remote_addr - [$time_local] "$request" '
                          '$status $body_bytes_sent '
                          'rt=$request_time uct="$upstream_connect_time" '
                          'uht="$upstream_header_time" urt="$upstream_response_time" '
                          'cs=$upstream_cache_status';
    
    access_log /var/log/nginx/access.log main;
    
    # SSL Configuration (will be enabled after SSL setup)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_ecdh_curve secp384r1;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Upstream configuration for Next.js app
    upstream nextjs_backend {
        server app:3000 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;               # Keep persistent connections
        keepalive_requests 1000;    # Max requests per keepalive connection
        keepalive_timeout 60s;      # Keepalive timeout
    }
    
    # Cache zones for static assets
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:50m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=10m use_temp_path=off;
    
    # HTTP server (redirect to HTTPS in production)
    server {
        listen 80;
        server_name _;
        server_tokens off;
        
        # Security: Block common attack patterns
        location ~ /\. { deny all; }
        location ~ ~$ { deny all; }
        location ~ \.php$ { deny all; }
        
        # Let's Encrypt challenge
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }
        
        # Health check endpoint (allow HTTP)
        location /health {
            proxy_pass http://nextjs_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            access_log off;
        }
        
        # Redirect all other traffic to HTTPS (will be enabled after SSL setup)
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # HTTPS server (main application)
    server {
        listen 443 ssl http2;
        server_name docflow.yourdomain.com;  # Replace with your domain
        server_tokens off;
        
        # SSL Certificate paths (update after obtaining certificates)
        ssl_certificate /etc/letsencrypt/live/docflow.yourdomain.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/docflow.yourdomain.com/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/docflow.yourdomain.com/chain.pem;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob:; worker-src 'self' blob:; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data: https://unpkg.com; connect-src 'self' https://api.telegram.org https://unpkg.com; object-src 'none'; media-src 'self'; frame-src 'self'; base-uri 'self'; form-action 'self'" always;
        
        # Security: Block common attack patterns
        location ~ /\. { deny all; }
        location ~ ~$ { deny all; }
        location ~ \.php$ { deny all; }
        
        # Block access to sensitive files
        location ~ /\.(env|gitignore|gitattributes|htaccess)$ {
            deny all;
        }
        
        # API routes with rate limiting and caching
        location /api/ {
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            limit_req zone=general burst=50 nodelay;
            
            # Special rate limiting for sensitive endpoints
            location /api/auth/ {
                limit_req zone=login burst=5 nodelay;
                proxy_pass http://nextjs_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Port $server_port;
                proxy_buffering off;
                proxy_request_buffering off;
            }
            
            location /api/documents {
                limit_req zone=upload burst=3 nodelay;
                client_max_body_size 50M;
                client_body_timeout 300s;
                proxy_read_timeout 300s;
                proxy_send_timeout 300s;
                proxy_pass http://nextjs_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Port $server_port;
                proxy_buffering off;
                proxy_request_buffering off;
            }
            
            # General API proxy
            proxy_pass http://nextjs_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # API response caching (for safe methods only)
            proxy_cache api_cache;
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_methods GET HEAD;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;
        }
        
        # Static assets with aggressive caching
        location /_next/static/ {
            proxy_pass http://nextjs_backend;
            proxy_cache static_cache;
            proxy_cache_valid 200 1y;
            proxy_cache_valid 404 10m;
            add_header Cache-Control "public, immutable, max-age=31536000";
            add_header X-Cache-Status $upstream_cache_status;
            expires 1y;
        }
        
        # Public assets caching
        location /public/ {
            proxy_pass http://nextjs_backend;
            proxy_cache static_cache;
            proxy_cache_valid 200 7d;
            proxy_cache_valid 404 1m;
            add_header Cache-Control "public, max-age=604800";
            expires 7d;
        }
        
        # PDF files with special handling
        location ~ \.pdf$ {
            proxy_pass http://nextjs_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_cache off;
            add_header X-Content-Type-Options nosniff;
            add_header Content-Security-Policy "default-src 'none'; script-src 'self' blob:; worker-src 'self' blob:; style-src 'self' 'unsafe-inline'";
        }
        
        # Font files with CORS headers
        location ~* \.(eot|otf|ttf|woff|woff2)$ {
            proxy_pass http://nextjs_backend;
            add_header Access-Control-Allow-Origin *;
            add_header Cache-Control "public, max-age=31536000, immutable";
            expires 1y;
        }
        
        # Image optimization
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp)$ {
            proxy_pass http://nextjs_backend;
            proxy_cache static_cache;
            proxy_cache_valid 200 30d;
            proxy_cache_valid 404 1m;
            add_header Cache-Control "public, max-age=2592000";
            expires 30d;
        }
        
        # Main application proxy
        location / {
            # Rate limiting for general requests
            limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://nextjs_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # Nginx status (internal monitoring)
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx status page (restrict access)
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.25.0.0/16;  # Docker network
            deny all;
        }
    }
    
    # Additional server block for monitoring (internal only)
    server {
        listen 8080;
        server_name localhost;
        access_log off;
        
        location /health {
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /status {
            stub_status on;
        }
    }
}

# Stream block for TCP/UDP load balancing (future use)
stream {
    log_format stream_main '$remote_addr [$time_local] $protocol $status $bytes_sent $bytes_received $session_time';
    
    # Future: Add TCP/UDP load balancing if needed
}