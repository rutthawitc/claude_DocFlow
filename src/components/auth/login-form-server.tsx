// src/components/auth/login-form-server.tsx
"use client";

import { useActionState } from "react";
import { loginAction } from "@/actions/auth";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Loader2 } from "lucide-react";
import { signIn, useSession } from "next-auth/react";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";

// ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ csrfToken ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CSRF ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

export function LoginFormServer() {
  const router = useRouter();
  
  // initialState ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö loginAction
  const initialState = { errors: {}, message: "" };
  const [state, formAction, isPending] = useActionState(
    loginAction,
    initialState
  );

  // ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á signIn
  const [signInError, setSignInError] = useState("");
  
  // Clear errors when user starts typing
  const clearErrors = () => {
    if (signInError) setSignInError("");
  };

  // Function to determine redirect URL based on user data
  const getRedirectUrl = (session: any): string => {
    if (!session?.user?.pwa) {
      return '/documents'; // Default fallback
    }

    const userRoles = session.user.pwa.roles || [];
    const userBA = session.user.pwa.ba;

    console.log('Determining redirect URL - User roles:', userRoles, 'BA:', userBA);

    // Check if user is a branch user and has a valid BA
    if (userRoles.includes('branch_user') && userBA) {
      return `/documents/branch/${userBA}`;
    } else if (userRoles.includes('district_manager')) {
      return '/documents';
    } else if (userRoles.includes('admin')) {
      return '/documents';
    } else {
      // Default for other roles (uploader, branch_manager, etc.)
      return '/documents';
    }
  };

  // ‡πÉ‡∏ä‡πâ static ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á hydration mismatch
  const usernameId = "login-username";
  const passwordId = "login-password";

  // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials ‡∏à‡∏≤‡∏Å server action
  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• credentials ‡∏à‡∏≤‡∏Å server action ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (state.success && state.credentials) {
      console.log(
        "Credentials received from server action, signing in from client"
      );
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ signIn ‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á client
      signIn("credentials", {
        username: state.credentials.username,
        pwd: state.credentials.pwd,
        redirect: false, // Don't redirect automatically to handle errors properly
      })
        .then(async (result) => {
          if (result?.error) {
            console.log("üî• LOGIN FORM - Login error from client signIn:", result.error);
            setSignInError("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
          } else if (result?.ok && result?.url) {
            console.log("‚úÖ LOGIN FORM - Login successful from client signIn");
            console.log("üîÑ LOGIN FORM - Result URL:", result.url);
            
            // Force a page reload to ensure the session is properly updated
            // and the client-only-login-page redirect logic can run
            window.location.reload();
          }
        })
        .catch((error) => {
          console.error("SignIn error:", error);
          setSignInError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
        });
    }
  }, [state]);

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        {/*         <CardTitle className="text-2xl font-bold text-center">
          ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        </CardTitle>
        <CardDescription className="text-center">
          ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ PWA Intranet
        </CardDescription> */}
      </CardHeader>
      <CardContent>
        <form action={formAction} className="space-y-4">
          {/* ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ csrf_token ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ */}
          {(state.message || signInError) && (
            <Alert variant="destructive">
              <AlertDescription>
                {state.message || signInError}
              </AlertDescription>
            </Alert>
          )}

          <div className="space-y-2">
            <Label htmlFor={usernameId}>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</Label>
            <Input
              id={usernameId}
              name="username"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
              required
              onChange={clearErrors}
            />
            {state.errors?.username && (
              <p className="text-sm text-red-500">{state.errors.username}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor={passwordId}>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</Label>
            <Input
              id={passwordId}
              name="pwd"
              type="password"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              required
              onChange={clearErrors}
            />
            {state.errors?.pwd && (
              <p className="text-sm text-red-500">{state.errors.pwd}</p>
            )}
          </div>

          <Button type="submit" className="w-full" disabled={isPending}>
            {isPending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...
              </>
            ) : (
              "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"
            )}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}
