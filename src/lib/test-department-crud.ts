/**
 * Manual testing utilities for Department CRUD functionality
 * This file provides testing utilities to verify the department management system
 */

import { validateDepartmentCreate, validateDepartmentUpdate } from './utils/department-validation';

// Test data
const testCreateData = {
  baCode: 105906,
  name: '‡∏Å‡∏õ‡∏†.‡πÄ‡∏Ç‡∏ï 6 - ‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
  departmentName: '‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
  regionId: 6,
  regionCode: 'R6',
  isActive: true
};

const testUpdateData = {
  name: '‡∏Å‡∏õ‡∏†.‡πÄ‡∏Ç‡∏ï 6 - ‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
  departmentName: '‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
  regionId: 6,
  regionCode: 'R6',
  isActive: false
};

const invalidCreateData = {
  baCode: 999, // Too small
  name: 'AB', // Too short
  departmentName: '',
  regionId: 25, // Too large
  regionCode: 'INVALID', // Wrong format
  isActive: true
};

/**
 * Test client-side validation
 */
export function testDepartmentValidation() {
  console.log('üß™ Testing Department Validation');
  console.log('=================================');

  // Test valid create data
  console.log('\n1. Testing valid create data:');
  const validResult = validateDepartmentCreate(testCreateData);
  console.log('‚úÖ Valid data result:', validResult);

  // Test invalid create data
  console.log('\n2. Testing invalid create data:');
  const invalidResult = validateDepartmentCreate(invalidCreateData);
  console.log('‚ùå Invalid data result:', invalidResult);

  // Test valid update data
  console.log('\n3. Testing valid update data:');
  const validUpdateResult = validateDepartmentUpdate(testUpdateData);
  console.log('‚úÖ Valid update result:', validUpdateResult);

  // Test empty update data
  console.log('\n4. Testing empty update data:');
  const emptyUpdateResult = validateDepartmentUpdate({});
  console.log('‚ùå Empty update result:', emptyUpdateResult);

  return {
    validCreate: validResult.success,
    invalidCreate: !invalidResult.success,
    validUpdate: validUpdateResult.success,
    emptyUpdate: !emptyUpdateResult.success
  };
}

/**
 * Test API endpoints (requires running server)
 */
export async function testDepartmentAPI() {
  console.log('üß™ Testing Department API');
  console.log('========================');

  try {
    // Test GET departments
    console.log('\n1. Testing GET /api/admin/departments');
    const getResponse = await fetch('/api/admin/departments?limit=5', {
      credentials: 'include'
    });
    const getResult = await getResponse.json();
    console.log(`‚úÖ GET departments: ${getResponse.status}`, getResult);

    // Test POST create department (commented out to prevent test data creation)
    /*
    console.log('\n2. Testing POST /api/admin/departments');
    const postResponse = await fetch('/api/admin/departments', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      body: JSON.stringify(testCreateData)
    });
    const postResult = await postResponse.json();
    console.log(`‚úÖ POST department: ${postResponse.status}`, postResult);
    */

    return {
      getDepartments: getResponse.ok,
      // createDepartment: postResponse.ok
    };

  } catch (error) {
    console.error('‚ùå API test error:', error);
    return {
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Manual test checklist
 */
export const departmentTestChecklist = {
  validation: [
    '‚úì Valid BA codes (1000-999999) are accepted',
    '‚úì Invalid BA codes are rejected',
    '‚úì Department names with proper length are accepted',
    '‚úì Short department names are rejected',
    '‚úì Valid region codes (R1-R20) are accepted',
    '‚úì Invalid region codes are rejected',
    '‚úì Update validation requires at least one field'
  ],

  api: [
    '‚úì GET /api/admin/departments returns department list',
    '‚úì GET /api/admin/departments/{id} returns specific department',
    '‚úì POST /api/admin/departments creates new department',
    '‚úì PUT /api/admin/departments/{id} updates department',
    '‚úì DELETE /api/admin/departments/{id} deactivates department',
    '‚úì Proper authentication and authorization checks',
    '‚úì Input validation and sanitization',
    '‚úì Error handling and meaningful error messages'
  ],

  ui: [
    '‚úì Department list loads and displays correctly',
    '‚úì Create department modal works',
    '‚úì Edit department modal works',
    '‚úì Delete confirmation works',
    '‚úì Search and filtering work',
    '‚úì Pagination works',
    '‚úì Form validation displays errors',
    '‚úì Loading states are shown',
    '‚úì Success/error messages are displayed'
  ],

  permissions: [
    '‚úì Only admins can access department management',
    '‚úì District managers can view departments',
    '‚úì Only admins can create/edit/delete departments',
    '‚úì Unauthorized users get proper error messages'
  ]
};

/**
 * Print test checklist
 */
export function printTestChecklist() {
  console.log('üìã Department CRUD Test Checklist');
  console.log('=================================');

  Object.entries(departmentTestChecklist).forEach(([category, items]) => {
    console.log(`\n${category.toUpperCase()}:`);
    items.forEach(item => console.log(`  ${item}`));
  });

  console.log('\nüìù Manual Testing Steps:');
  console.log('1. Start development server: pnpm dev');
  console.log('2. Login as admin user');
  console.log('3. Navigate to /admin/departments');
  console.log('4. Test each CRUD operation');
  console.log('5. Test error conditions');
  console.log('6. Test with different user roles');
  console.log('7. Verify all validations work');
}

// Export for browser console testing
if (typeof window !== 'undefined') {
  (window as any).testDepartmentValidation = testDepartmentValidation;
  (window as any).testDepartmentAPI = testDepartmentAPI;
  (window as any).printTestChecklist = printTestChecklist;
}